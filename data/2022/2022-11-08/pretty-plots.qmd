---
title: "TidyTuesday"
author: "DanWall"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(purrr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(janitor)
library(rvest)

tuesdata <- tidytuesdayR::tt_load('2022-11-08')
state_stations <- tuesdata$state_stations
station_info <- tuesdata$station_info

```


```{r}
raw_contour <- read_delim(
  "FM_service_contour_current.txt",
  delim = "|"
)

conv_contour <- raw_contour |>
  select(-last_col()) |>
  set_names(nm = c(
    "application_id", "service", "lms_application_id", "dts_site_number", "transmitter_site",
    glue::glue("deg_{0:360}")
  ))

lng_contour <- conv_contour |>
  separate(
    transmitter_site, 
    into = c("site_lat", "site_long"), 
    sep = " ,") |>
  pivot_longer(
    names_to = "angle",
    values_to = "values",
    cols = deg_0:deg_360
  ) |>
  mutate(
    angle = str_remove(angle, "deg_"),
    angle = as.integer(angle)
  ) |>
  separate(
    values,
    into = c("deg_lat", "deg_lng"),
    sep = " ,"
  )
  
```


Idea:

Create a topographical map that has heights which show the number of radio stations that can be heard at that location

```{r}
library(rayshader)
library(maps)
library(sf)

# Function from stack overflow
lonlat_to_state <- function(pointsDF,
                            states = spData::us_states,
                            name_col = "NAME") {
    ## Convert points data.frame to an sf POINTS object
    pts <- st_as_sf(pointsDF, coords = 1:2, crs = 4326)

    ## Transform spatial data to some planar coordinate system
    ## (e.g. Web Mercator) as required for geometric operations
    states <- st_transform(states, crs = 3857)
    pts <- st_transform(pts, crs = 3857)

    ## Find names of state (if any) intersected by each point
    state_names <- states[[name_col]]
    ii <- as.integer(st_intersects(pts, states))
    state_names[ii]
}

alabama_lngs <- lng_contour %>% filter (deg_lat>30, deg_lat< 35.1, deg_lng < -90, deg_lng > -80) 


alabama_lngs$state <- alabama_lngs %>% 
  select(deg_lng, deg_lat) %>% 
  na.omit() %>% 
  rename(x = deg_lng, y = deg_lat) %>% 
  lonlat_to_state()
  
alabama_lngs <- alabama_lngs %>% 
  filter(state == "Alabama")
```


```{r}

# Get boundaries for the counties
library(geojsonsf)

# data downloaded from https://public.opendatasoft.com/explore/dataset/us-county-boundaries/table/?disjunctive.statefp&disjunctive.countyfp&disjunctive.name&disjunctive.namelsad&disjunctive.stusab&disjunctive.state_name
county_bounds <- geojsonsf::geojson_sf( "us-county-boundaries.geojson")

# crs-3857 means coordinates are in longitude and latitude
county_bounds <- st_transform(county_bounds, crs = 3857)

county_bounds_alabama <- county_bounds %>% 
  filter(state_name == "Alabama")


lonlat_to_county <- function(pointsDF,
                            counties = county_bounds_alabama,
                            name_col = "name") {
    ## Convert points data.frame to an sf POINTS object
    pts <- st_as_sf(pointsDF, coords = 1:2, crs = 4326)

    ## Transform spatial data to some planar coordinate system
    ## (e.g. Web Mercator) as required for geometric operations
    counties <- st_transform(counties, crs = 3857)
    pts <- st_transform(pts, crs = 3857)

    ## Find names of county (if any) intersected by each point
    county_names <- counties[[name_col]]
    ii <- as.integer(st_intersects(pts, counties))
    county_names[ii]
}


```


```{r}
alabama_lngs$county <- alabama_lngs %>% 
  select(deg_lng, deg_lat) %>% 
  na.omit() %>% 
  rename(x = deg_lng, y = deg_lat) %>% 
  lonlat_to_county()
  
```


```{r}
# Get the number of radio stations that can be heard in each county in Alabama
alabama_county_nstation <- alabama_lngs %>% 
  filter(state == "Alabama") %>% 
  group_by(application_id, county) %>% 
  sample_n(1) %>% 
  group_by(county) %>% 
  count() %>% 
  filter(!is.na(county)) %>% 
  mutate(county = str_replace(county, "DeKalb", "De Kalb") %>% 
           str_replace("St. Clair", "St Clair"))
```



```{r}
county_map2 <- map("county", plot = FALSE, fill = TRUE)


county_map2sf <- st_as_sf(county_map2) %>%
  separate(
    ID, 
    into = c("state", "county"), 
    sep = ",") %>% 
  filter(state == "alabama") %>% 
  mutate(county = str_to_title(county)) %>%
  left_join(alabama_county_nstation)

county_level_plot <- ggplot(county_map2sf) +
  geom_sf(aes(fill = n))

county_level_plot
```

```{r}
library(rayshader)
county_level_plot <- county_level_plot +    
  scale_fill_viridis_b() +
  theme(legend.position = "none", 
        axis.line=element_blank(), 
        axis.text.x=element_blank(), axis.title.x=element_blank(),
        axis.text.y=element_blank(), axis.title.y=element_blank(),
        axis.ticks=element_blank(), 
        panel.background = element_blank()) 


county_level_rayshader <- county_level_plot %>% 
  rayshader::plot_gg()
```


```{r}
render_snapshot("alabama")
```



